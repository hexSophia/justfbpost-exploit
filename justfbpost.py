import requests, threading, random, sys, time

dbg = False
senttime = 0
starttime = time.time()

def dbgprint(str):
    if dbg:
        sys.stdout.write(f"(DEBUG) {str}\n")

class JustFBPoster:
    def __init__(self, fbid: str, content: str, randomize: bool):
        self.proxies = {
            "http": f"proxy here"
        }
        self.postdata = {
            "data" : {
                "fb_id" : fbid,
                "images" : [],
                "message" : content,
                "title" : ""
            }
        }
        self.randomize = randomize
    
    def sent(self):
        postdata = self.postdata
        if self.randomize:
            message = ""
            for i in postdata['data']['message']:
                message += i
                tmp = random.randint(1, 4)
                if tmp == 1:
                    message += "."
                elif tmp == 2:
                    message += "/"
                elif tmp == 3:
                    message += "|"
                elif tmp == 4:
                    message += "\\"
            message += " " + str(random.randint(100000000, 999999999))
            dbgprint(message)
            postdata['data']['message'] = message
        try:
            result = requests.post("https://justfbpost.com/api/v1/submit", proxies=self.proxies, json=postdata).json()
            dbgprint(result)
            return result
        except Exception as e:
            return {'status': False, 'error': e}

def sentThread(threadid: int):
    global senttime
    while True:
        fbid = "fbid here"
        content = "content here"
        result = JustFBPoster(fbid, content, randomize = False).sent()
        rps = round(senttime / (time.time() - starttime))
        if result['status']:
            senttime+=1
            sys.stdout.write(f"(Thread {threadid}) \"{result['id']}\" successfully sent at \"{result['created_at']}\" with content \"{content}\" on \"{fbid}\"! rps: {rps} sent: {senttime}\n")
        else:
            print(result)
        sleeptime = random.randint(20, 1800)
        sys.stdout.write(f"(Thread {threadid}) Sleep for {sleeptime}...")
        time.sleep(sleeptime)

def main():
    threads = []
    for i in range(1):
        threads.append(threading.Thread(target = sentThread, args = (i,)))
        threads[i].start()
    
    for thread in threads:
        thread.join()

if __name__ == "__main__":
    main()